// Generated by IcedCoffeeScript 1.8.0-e
var Promise, beforeEvery, moirai, _;

moirai = require('../lib/worker');

Promise = require('promise');

_ = require('underscore');

beforeEvery = function() {
  this.api = {
    users: {
      getUsers: jasmine.createSpy('getUsers').andReturn(Promise.resolve([
        {
          _id: 'org.couchdb.user:member1',
          data: {
            publicKeys: [
              {
                name: 'moirai',
                key: 'keyvalue1'
              }
            ]
          }
        }, {
          _id: 'org.couchdb.user:member2',
          data: {
            publicKeys: [
              {
                name: 'not-moirai',
                key: 'keyvalue2'
              }
            ]
          }
        }, {
          _id: 'org.couchdb.user:member3',
          data: {
            publicKeys: []
          }
        }, {
          _id: 'org.couchdb.user:member3',
          data: {
            publicKeys: [
              {
                name: 'moirai',
                key: 'keyvalue4'
              }, {
                name: 'moirai',
                key: 'keyvalue4.2'
              }
            ]
          }
        }
      ]))
    },
    teams: {
      getAllTeamRolesForUser: jasmine.createSpy('getAllTeamRolesForUser').andReturn(Promise.resolve([
        {
          team: 'team1Obj'
        }, {
          team: 'team2Obj'
        }
      ]))
    }
  };
  this.validation = {};
  this.config = {
    RESOURCES: {
      MOIRAI: {}
    }
  };
  this.couch_utils = {
    conf: this.config,
    get_system_user: jasmine.createSpy('get_system_user').andReturn('couchClient')
  };
  return this.moirai = moirai(this.api, this.validation, this.couch_utils);
};

describe('setClusterKeys', function() {
  beforeEach(beforeEvery);
  return it('sends the cluster and keys to the moirai API', function(done) {
    var keys;
    spyOn(this.moirai.testing.moiraiClient, 'put').andReturn(Promise.resolve());
    keys = ['key1', 'key2'];
    return this.moirai.testing.setClusterKeys('clusterid', keys).then((function(_this) {
      return function() {
        expect(_this.moirai.testing.moiraiClient.put).toHaveBeenCalledWith({
          url: '/moirai/clusters/clusterid/keys',
          json: keys,
          body_only: true
        });
        return done();
      };
    })(this));
  });
});

describe('getTeamKeys', function() {
  beforeEach(function() {
    beforeEvery.apply(this);
    return this.team = {
      roles: {
        admin: {
          members: ['member1', 'member2']
        },
        member: {
          members: ['member3', 'member4']
        }
      },
      rsrcs: {
        moirai: {
          assets: [
            {
              id: 'ab38f',
              cluster_id: 'cluster_test1',
              name: 'test1'
            }, {
              id: 'xy93d',
              cluster_id: 'cluster_test2',
              name: 'test2'
            }
          ]
        }
      }
    };
  });
  it('calls getUsers', function(done) {
    return this.moirai.testing.getTeamKeys(this.team).then((function(_this) {
      return function() {
        var userList;
        userList = ['member1', 'member2', 'member3', 'member4'];
        expect(_this.api.users.getUsers).toHaveBeenCalledWith('couchClient', {
          names: userList
        }, 'promise');
        return done();
      };
    })(this))["catch"](done);
  });
  it('gets a valid key where the name is moirai', function(done) {
    return this.moirai.testing.getTeamKeys(this.team).then((function(_this) {
      return function(result) {
        expect(_.contains(result, 'keyvalue1')).toEqual(true);
        return done();
      };
    })(this))["catch"](done);
  });
  it('does not get a key if the name is not moirai', function(done) {
    return this.moirai.testing.getTeamKeys(this.team).then((function(_this) {
      return function(result) {
        expect(_.contains(result, 'keyvalue2')).toEqual(false);
        return done();
      };
    })(this))["catch"](done);
  });
  it('only gets one moirai key per person', function(done) {
    return this.moirai.testing.getTeamKeys(this.team).then((function(_this) {
      return function(result) {
        expect(_.contains(result, 'keyvalue4')).toEqual(true);
        expect(_.contains(result, 'keyvalue4.2')).toEqual(false);
        return done();
      };
    })(this))["catch"](done);
  });
  return it('gets the appropriate number of keys', function(done) {
    return this.moirai.testing.getTeamKeys(this.team).then((function(_this) {
      return function(result) {
        expect(result.length).toEqual(2);
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('setTeamKeys', function() {
  beforeEach(function() {
    beforeEvery.apply(this);
    this.team = {
      rsrcs: {
        moirai: {
          assets: [
            {
              id: 'ab38f',
              cluster_id: 'cluster_test1',
              name: 'test1'
            }, {
              id: 'xy93d',
              cluster_id: 'cluster_test2',
              name: 'test2'
            }
          ]
        }
      }
    };
    spyOn(this.moirai.testing, 'getTeamKeys').andReturn(Promise.resolve(['key1', 'key3']));
    return spyOn(this.moirai.testing, 'setClusterKeys').andReturn(Promise.resolve());
  });
  it('calls getTeamKeys', function(done) {
    return this.moirai.testing.setTeamKeys(this.team).then((function(_this) {
      return function() {
        expect(_this.moirai.testing.getTeamKeys).toHaveBeenCalledWith(_this.team);
        return done();
      };
    })(this));
  });
  return it('calls setClusterKeys with cluster id and key list', function(done) {
    return this.moirai.testing.setTeamKeys(this.team).then((function(_this) {
      return function() {
        expect(_this.moirai.testing.setClusterKeys.calls.length).toEqual(2);
        expect(_this.moirai.testing.setClusterKeys).toHaveBeenCalledWith('cluster_test1', ['key1', 'key3']);
        expect(_this.moirai.testing.setClusterKeys).toHaveBeenCalledWith('cluster_test2', ['key1', 'key3']);
        return done();
      };
    })(this));
  });
});

describe('handleAddUser', function() {
  beforeEach(beforeEvery);
  return it('gets the team object and calls setTeamKeys', function(done) {
    var handleAddUser;
    handleAddUser = this.moirai.handlers.team['u+'];
    spyOn(this.moirai.testing, 'setTeamKeys').andReturn(Promise.resolve());
    return handleAddUser({
      user: 'userid',
      role: 'member'
    }, 'team').then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.setTeamKeys).toHaveBeenCalledWith('team');
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('handleRemoveUser', function() {
  beforeEach(beforeEvery);
  return it('gets the team object and calls setTeamKeys', function(done) {
    var handleRemoveUser;
    handleRemoveUser = this.moirai.handlers.team['u-'];
    spyOn(this.moirai.testing, 'setTeamKeys').andReturn(Promise.resolve());
    return handleRemoveUser({
      user: 'userid',
      role: 'member'
    }, 'team').then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.setTeamKeys).toHaveBeenCalledWith('team');
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('removeCluster', function() {
  beforeEach(beforeEvery);
  return it('calls the moirai API to remove the cluster', function(done) {
    spyOn(this.moirai.testing.moiraiClient, 'del').andReturn(Promise.resolve());
    return this.moirai.testing.removeCluster('testClusterId').then((function(_this) {
      return function() {
        expect(_this.moirai.testing.moiraiClient.del).toHaveBeenCalledWith('/moirai/clusters/testClusterId');
        return done();
      };
    })(this));
  });
});

describe('handleRemoveCluster', function() {
  beforeEach(beforeEvery);
  return it('calls removeCluster', function(done) {
    var handleRemoveCluster;
    handleRemoveCluster = this.moirai.handlers.team.self['a-'];
    spyOn(this.moirai.testing, 'removeCluster').andReturn(Promise.resolve());
    return handleRemoveCluster({
      asset: {
        cluster_id: 'clusterId'
      }
    }, 'team').then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.removeCluster).toHaveBeenCalledWith('clusterId');
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('handleAddCluster', function() {
  beforeEach(beforeEvery);
  return it('gets keys from getTeamKeys, calls setClusterKeys', function(done) {
    var handleAddCluster, testKeys;
    handleAddCluster = this.moirai.handlers.team.self['a+'];
    spyOn(this.moirai.testing, 'setClusterKeys').andReturn(Promise.resolve());
    testKeys = ['key1', 'key2'];
    spyOn(this.moirai.testing, 'getTeamKeys').andReturn(Promise.resolve(testKeys));
    return handleAddCluster({
      asset: {
        cluster_id: 'cluster_id'
      }
    }, 'team').then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.getTeamKeys).toHaveBeenCalledWith('team');
        expect(_this.moirai.testing.setClusterKeys).toHaveBeenCalledWith('cluster_id', testKeys);
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('handleAddData', function() {
  beforeEach(function() {
    beforeEvery.apply(this);
    spyOn(this.moirai.testing, 'setTeamKeys').andReturn(Promise.resolve());
    this.event = {
      data: {
        publicKeys: ['key']
      }
    };
    return this.user = {
      name: 'user_name'
    };
  });
  it('calls getAllTeamRolesForUser', function(done) {
    var handleAddData;
    handleAddData = this.moirai.handlers.user['d+'];
    return handleAddData(this.event, this.user).then((function(_this) {
      return function(resp) {
        expect(_this.api.teams.getAllTeamRolesForUser.calls.length).toEqual(1);
        expect(_this.api.teams.getAllTeamRolesForUser).toHaveBeenCalledWith('user_name');
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
  it('calls setTeamKeys', function(done) {
    var handleAddData;
    handleAddData = this.moirai.handlers.user['d+'];
    return handleAddData(this.event, this.user).then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.setTeamKeys.calls.length).toEqual(2);
        expect(_this.moirai.testing.setTeamKeys).toHaveBeenCalledWith('team1Obj');
        expect(_this.moirai.testing.setTeamKeys).toHaveBeenCalledWith('team2Obj');
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
  return it('does nothing if publicKeys not defined', function(done) {
    var handleAddData;
    this.event.data = {
      sampleData: 'test'
    };
    handleAddData = this.moirai.handlers.user['d+'];
    return handleAddData(this.event, this.user).then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.setTeamKeys.calls.length).toEqual(0);
        expect(resp).toBeUndefined();
        return done();
      };
    })(this))["catch"](done);
  });
});

describe('getOrCreateAsset', function() {
  beforeEach(function() {
    beforeEvery.apply(this);
    spyOn(this.moirai.testing.moiraiClient, 'post').andCallFake(function(assetData, team) {
      return Promise.resolve({
        _id: 'cluster_id',
        name: assetData.json.name
      });
    });
    this.team = {
      name: 'team1 name!',
      rsrcs: {
        moirai: {
          assets: [
            {
              id: "ab38f",
              cluster_id: 'cluster_test1',
              name: "test1"
            }
          ]
        }
      }
    };
    return this.actor = {
      data: {
        username: 'actorName',
        email: 'emailAddress'
      }
    };
  });
  it('does nothing if the cluster already exists', function(done) {
    return this.moirai.getOrCreateAsset({
      name: 'test1'
    }, this.team, this.actor).then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.moiraiClient.post).not.toHaveBeenCalled();
        expect(resp).toBeUndefined();
        return done();
      };
    })(this));
  });
  return it("gets/creates a repo, and returns the details to store in couch", function(done) {
    return this.moirai.getOrCreateAsset({
      "new": 'app name123'
    }, this.team, this.actor).then((function(_this) {
      return function(resp) {
        expect(_this.moirai.testing.moiraiClient.post).toHaveBeenCalledWith({
          url: '/moirai/clusters',
          json: {
            name: 'app name123',
            instances: [
              {
                tags: {
                  Name: 'moirai-team1-name-app-name123',
                  Application: 'app name123',
                  BusinessOwner: 'team1 name!',
                  Creator: _this.actor.data.username
                }
              }
            ]
          },
          body_only: true
        });
        expect(resp).toEqual({
          cluster_id: 'id',
          name: 'app name123'
        });
        return done();
      };
    })(this))["catch"](function(err) {
      return done(err);
    });
  });
});
